generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manager {
  id          String          @id @default(uuid())
  name        String          @unique
  position    String
  meta        Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  leftPairs   Pair[]          @relation("LeftManager")
  rightPairs  Pair[]          @relation("RightManager")
  screenShows ScreenManager[]

  @@map("managers")
}

model Reviewer {
  id                String         @id @default(uuid())
  name              String
  role              String?
  reliabilityWeight Float          @default(1.0)
  active            Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  modelData         ModelReviewer?
  pairs             Pair[]
  sessions          Session[]
  statsData         StatsReviewer?

  @@map("reviewers")
}

model Session {
  id         String        @id @default(uuid())
  reviewerId String        @map("reviewer_id")
  startedAt  DateTime      @default(now())
  status     SessionStatus @default(ACTIVE)
  screens    Screen[]
  reviewer   Reviewer      @relation(fields: [reviewerId], references: [id])

  @@map("sessions")
}

model Screen {
  id              String          @id @default(uuid())
  sessionId       String          @map("session_id")
  shownManagerIds String[]        @map("shown_manager_ids")
  isGolden        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  choice          Choice?
  managers        ScreenManager[]
  session         Session         @relation(fields: [sessionId], references: [id])

  @@map("screens")
}

model ScreenManager {
  screenId  String
  managerId String
  position  Int
  manager   Manager @relation(fields: [managerId], references: [id])
  screen    Screen  @relation(fields: [screenId], references: [id])

  @@id([screenId, managerId])
  @@map("screen_managers")
}

model Choice {
  id          String   @id @default(uuid())
  screenId    String   @unique @map("screen_id")
  top3Ids     String[] @map("top3_ids")
  loserId     String   @map("loser_id")
  skippedIds  String[] @map("skipped_ids")
  submittedAt DateTime @default(now())
  screen      Screen   @relation(fields: [screenId], references: [id])

  @@map("choices")
}

model Pair {
  id             BigInt   @id @default(autoincrement())
  reviewerId     String   @map("reviewer_id")
  iId            String   @map("i_id")
  jId            String   @map("j_id")
  weight         Float    @default(0.0667)
  sourceScreenId String   @map("source_screen_id")
  createdAt      DateTime @default(now())
  iManager       Manager  @relation("LeftManager", fields: [iId], references: [id])
  jManager       Manager  @relation("RightManager", fields: [jId], references: [id])
  reviewer       Reviewer @relation(fields: [reviewerId], references: [id])

  @@map("pairs")
}

model ModelReviewer {
  reviewerId String   @id @map("reviewer_id")
  thetaJson  Json
  seJson     Json?
  updatedAt  DateTime @updatedAt
  reviewer   Reviewer @relation(fields: [reviewerId], references: [id])

  @@map("models_reviewer")
}

model ModelGlobal {
  id         String   @id @default("global")
  muJson     Json
  ciLowJson  Json
  ciHighJson Json
  updatedAt  DateTime @updatedAt

  @@map("model_global")
}

model StatsReviewer {
  reviewerId         String   @id @map("reviewer_id")
  kendallTauToGlobal Float?   @map("kendall_tau_to_global")
  goldChecksPassed   Int      @default(0)
  inconsistencyRate  Float    @default(0.0)
  totalScreens       Int      @default(0)
  updatedAt          DateTime @updatedAt
  reviewer           Reviewer @relation(fields: [reviewerId], references: [id])

  @@map("stats_reviewer")
}

model ManagerExposure {
  reviewerId  String @map("reviewer_id")
  managerId   String @map("manager_id")
  count       Int    @default(0)
  uncertainty Float  @default(1.0)

  @@id([reviewerId, managerId])
  @@map("manager_exposures")
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  PAUSED
}
